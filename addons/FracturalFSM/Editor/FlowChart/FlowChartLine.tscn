[gd_scene load_steps=7 format=2]

[sub_resource type="Image" id=8]
data = {
"data": PoolByteArray( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 61, 61, 0, 63, 63, 63, 0, 60, 60, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 62, 0, 61, 61, 61, 71, 63, 63, 63, 100, 60, 60, 60, 21, 61, 61, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 61, 61, 0, 63, 63, 63, 174, 64, 64, 64, 255, 64, 64, 64, 255, 64, 64, 64, 242, 63, 63, 63, 93, 62, 62, 62, 0, 58, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 59, 59, 0, 59, 59, 59, 30, 63, 63, 63, 253, 121, 121, 121, 255, 181, 181, 181, 255, 89, 89, 89, 253, 64, 64, 64, 255, 62, 62, 62, 179, 58, 58, 58, 26, 60, 60, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 220, 220, 220, 255, 142, 142, 142, 255, 65, 65, 65, 253, 64, 64, 64, 242, 63, 63, 63, 92, 62, 62, 62, 0, 58, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 193, 193, 193, 255, 89, 89, 89, 253, 64, 64, 64, 255, 62, 62, 62, 179, 58, 58, 58, 26, 60, 60, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 219, 219, 219, 255, 142, 142, 142, 255, 65, 65, 65, 253, 64, 64, 64, 242, 63, 63, 63, 92, 62, 62, 62, 0, 61, 61, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 193, 193, 193, 255, 89, 89, 89, 253, 64, 64, 64, 255, 62, 62, 62, 179, 61, 61, 61, 25, 59, 59, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 219, 219, 219, 255, 142, 142, 142, 255, 65, 65, 65, 253, 64, 64, 64, 241, 58, 58, 58, 35, 58, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 191, 191, 191, 255, 65, 65, 65, 253, 62, 62, 62, 166, 62, 62, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 217, 217, 217, 255, 76, 76, 76, 252, 63, 63, 63, 209, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 191, 191, 191, 255, 89, 89, 89, 252, 64, 64, 64, 255, 61, 61, 61, 75, 61, 61, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 218, 218, 218, 255, 141, 141, 141, 255, 64, 64, 64, 253, 63, 63, 63, 240, 63, 63, 63, 89, 62, 62, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 192, 192, 192, 255, 89, 89, 89, 252, 64, 64, 64, 255, 63, 63, 63, 176, 55, 55, 55, 23, 59, 59, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 218, 218, 218, 255, 141, 141, 141, 255, 64, 64, 64, 253, 63, 63, 63, 240, 63, 63, 63, 89, 63, 63, 63, 0, 55, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 0, 60, 60, 60, 55, 64, 64, 64, 255, 170, 170, 170, 255, 224, 224, 224, 255, 224, 224, 224, 255, 192, 192, 192, 255, 89, 89, 89, 252, 64, 64, 64, 255, 63, 63, 63, 176, 63, 63, 63, 24, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 63, 0, 63, 63, 63, 48, 64, 64, 64, 255, 159, 159, 159, 255, 219, 219, 219, 255, 141, 141, 141, 255, 64, 64, 64, 253, 63, 63, 63, 240, 62, 62, 62, 90, 62, 62, 62, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 63, 63, 63, 233, 69, 69, 69, 252, 76, 76, 76, 252, 64, 64, 64, 255, 63, 63, 63, 177, 63, 63, 63, 24, 62, 62, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 29, 29, 0, 58, 58, 58, 39, 63, 63, 63, 170, 63, 63, 63, 184, 62, 62, 62, 86, 62, 62, 62, 0, 63, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 58, 58, 0, 63, 63, 63, 0, 63, 63, 63, 0, 62, 62, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ),
"format": "RGBA8",
"height": 20,
"mipmaps": false,
"width": 20
}

[sub_resource type="ImageTexture" id=9]
flags = 4
flags = 4
image = SubResource( 8 )
size = Vector2( 20, 20 )

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 1, 1, 1, 1 )
shadow_color = Color( 0.831373, 0.266667, 0.341176, 1 )
shadow_size = 2

[sub_resource type="StyleBoxFlat" id=4]
bg_color = Color( 1, 1, 1, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 0.2, 0.2, 0.2, 1 )
border_blend = true
shadow_color = Color( 0.2, 0.2, 0.2, 1 )
shadow_size = 1

[sub_resource type="Theme" id=5]
FlowChartLine/icons/arrow = SubResource( 9 )
FlowChartLine/styles/focus = SubResource( 3 )
FlowChartLine/styles/normal = SubResource( 4 )

[sub_resource type="GDScript" id=7]
script/source = "tool
extends Container
# Custom style normal, focus, arrow

var selected = false setget set_selected


func _init():
	focus_mode = FOCUS_CLICK
	mouse_filter = MOUSE_FILTER_IGNORE

func _draw():
	pivot_at_line_start()
	var from = Vector2.ZERO
	from.y += rect_size.y / 2.0
	var to = rect_size
	to.y -= rect_size.y / 2.0
	var arrow = get_icon(\"arrow\", \"FlowChartLine\")
	var tint = Color.white
	if selected:
		tint = get_stylebox(\"focus\", \"FlowChartLine\").shadow_color
		draw_style_box(get_stylebox(\"focus\", \"FlowChartLine\"), Rect2(Vector2.ZERO, rect_size))
	else:
		draw_style_box(get_stylebox(\"normal\", \"FlowChartLine\"), Rect2(Vector2.ZERO, rect_size))
	
	
	draw_texture(arrow, Vector2.ZERO - arrow.get_size() / 2 + rect_size / 2, tint)

func _get_minimum_size():
	return Vector2(0, 5)

func pivot_at_line_start():
	rect_pivot_offset.x = 0
	rect_pivot_offset.y = rect_size.y / 2.0

func join(from, to, offset=Vector2.ZERO, clip_rects=[]):
	# Offset along perpendicular direction
	var perp_dir = from.direction_to(to).rotated(deg2rad(90.0)).normalized()
	from -= perp_dir * offset
	to -= perp_dir * offset

	var dist = from.distance_to(to)
	var dir = from.direction_to(to)
	var center = from + dir * dist / 2

	# Clip line with provided Rect2 array
	var clipped = [[from, to]]
	var line_from = from
	var line_to = to
	for clip_rect in clip_rects:
		if clipped.size() == 0:
			break
		
		line_from = clipped[0][0]
		line_to = clipped[0][1]
		clipped = Geometry.clip_polyline_with_polygon_2d(
				[line_from, line_to], 
				[clip_rect.position, Vector2(clip_rect.position.x, clip_rect.end.y), 
					clip_rect.end, Vector2(clip_rect.end.x, clip_rect.position.y)]
				)

	if clipped.size() > 0:
		from = clipped[0][0]
		to = clipped[0][1]
	else: # Line is totally overlapped
		from = center
		to = center + dir * 0.1

	# Extends line by 2px to minimise ugly seam	
	from -= dir * 2.0
	to += dir * 2.0

	rect_size.x = to.distance_to(from)
	# rect_size.y equals to the thickness of line
	rect_position = from
	rect_position.y -= rect_size.y / 2.0
	rect_rotation = rad2deg(Vector2.RIGHT.angle_to(dir))
	pivot_at_line_start()

func set_selected(v):
	if selected != v:
		selected = v
		update()

func get_from_pos():
	return get_transform().xform(rect_position)

func get_to_pos():
	return get_transform().xform(rect_position + rect_size)
"

[node name="FlowChartLine" type="Container"]
margin_bottom = 5.0
rect_pivot_offset = Vector2( 0, 2.5 )
focus_mode = 1
mouse_filter = 2
theme = SubResource( 5 )
script = SubResource( 7 )
